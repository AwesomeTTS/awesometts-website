{{!
  ! AwesomeTTS text-to-speech add-on website
  ! Copyright (C) 2014-Present  Anki AwesomeTTS Development Team
  !
  ! This program is free software: you can redistribute it and/or modify
  ! it under the terms of the GNU Affero General Public License as
  ! published by the Free Software Foundation, either version 3 of the
  ! License, or (at your option) any later version.
  !
  ! This program is distributed in the hope that it will be useful,
  ! but WITHOUT ANY WARRANTY; without even the implied warranty of
  ! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ! GNU Affero General Public License for more details.
  !
  ! You should have received a copy of the GNU Affero General Public License
  ! along with this program.  If not, see <http://www.gnu.org/licenses/>.
  !}}

{{> above}}

<figure style="width: 534px">
    <img src="/config.text.png" width="534" height="573"
      alt="AwesomeTTS configuration dialog with the Text tab selected">

    <figcaption>&ldquo;Text&rdquo; configuration tab</figcaption>
</figure>

<p>The &ldquo;Text&rdquo; tab allows users to control how AwesomeTTS
  transforms incoming text before it is sent to a TTS service to be
  spoken.</p>

<p>A number of simple transformations can be enabled that cover some common
  use cases. Advanced users can also define a custom list of text
  substitutions to perform on incoming text.</p>

<p>Collectively, these options can be helpful for users who keep snippets of
  text within their note fields that they want visually on-screen but either
  do not want played back or want played back in another form, particularly
  with shared decks that might not have had AwesomeTTS in mind. Users who are
  building up decks from scratch may choose to keep non-audible snippets of
  information in separate note fields from the actual spoken language words as
  an alternative to using these features.</p>

<h2>Handling Template Text</h2>

<p>These options are used whenever AwesomeTTS parses content that came from a
  template (e.g. on-the-fly <code>&lt;tts&gt;</code> tags). These options are
  applied after Anki has already done any needed template substitutions or
  cloze deletions (i.e. after the values from your note fields have already
  been injected into your template and after any cloze deletion patterns have
  been turned into what you see on-screen while studying).</p>

<h2>Handling Text from a Note Field</h2>

<p>These options are used whenever AwesomeTTS parses content that came from a
  note field (e.g. when <a href="/usage/browser">mass generating audio files
  in the browser editor</a>, or for prepopulating the input text field from
  the note&rsquo;s active field when <a href="/usage/editor">adding audio
  files in the note editor</a>).</p>

<h2>Simple Options</h2>

<h3>Cloze Deletion Handling</h3>

<p>Cloze deletions can be used within Anki for chopping out a bit of text
  inside of a larger note that the studier must recall. For more about cloze
  deletion or how Anki implements it within cards, see the <a rel="external"
  href="http://ankisrs.net/docs/manual.html#cloze-deletion">cloze deletion
  topic in the manual</a>. The cloze options will let you control how
  AwesomeTTS handles these.</p>

{{=<%disable mustache%>=}}

<div class="scroll"><table><tr>
    <td>if your note field had&hellip;</td>
    <td><kbd>Hello {{c1::world}}!</kbd></td>
    <td><kbd>Hello {{c1::world::place}}!</kbd></td>
</tr><tr>
    <td>then on a card front, Anki would render&hellip;</td>
    <td><samp>Hello <strong>[...]</strong>!</samp></td>
    <td><samp>Hello <strong>[place]<strong>!</samp></td>
</tr><tr>
    <td>then with &ldquo;read however Anki displayed it&rdquo; /<br>
      &nbsp; &nbsp; &ldquo;read as Anki would display on a card
      front&rdquo;,<br>
      AwesomeTTS would read&hellip;</td>
    <td><samp>Hello ... !</samp></td>
    <td><samp>Hello place!</samp></td>
</tr><tr>
    <td>or with &ldquo;read w/ hint wrapped in ellipses&rdquo; /<br>
      &nbsp; &nbsp; &ldquo;replace w/ hint wrapped in ellipses&rdquo;,<br>
      AwesomeTTS would read&hellip;</td>
    <td><samp>Hello ... !</samp></td>
    <td><samp>Hello ... place ... !</samp></td>
</tr><tr>
    <td>or with &ldquo;replace w/ deleted text&rdquo; <em>(notes
      only)</em>,<br>
      AwesomeTTS would read&hellip;</td>
    <td><samp>Hello world!</samp></td>
    <td><samp>Hello world!</samp></td>
</tr><tr>
    <td>or with &ldquo;read as an ellipsis, ignoring hint&rdquo; /<br>
      &nbsp; &nbsp; &ldquo;replace w/ ellipsis, ignoring both&rdquo;,<br>
      AwesomeTTS would read&hellip;</td>
    <td><samp>Hello ... !</samp></td>
    <td><samp>Hello ... !</samp></td>
</tr><tr>
    <td>or with &ldquo;remove entirely&rdquo;,<br>
      AwesomeTTS would read&hellip;</td>
    <td><samp>Hello !</samp></td>
    <td><samp>Hello !</samp></td>
</tr></table></div>

<p>In addition, if you are using cloze with on-the-fly playback, and you only
  want the revealed text to be spoken on the answer side (e.g. you have a
  <samp>&lt;tts&gt;</samp> tag around the same field on both sides of your
  template), you can do so by checking &ldquo;For cloze answers, read revealed
  text only&rdquo;.</p>

<h3><code>{{hint}}</code> Fields</h3>

<p>If AwesomeTTS encounters the output of a <code>{{hint}}</code> within one
  of your <samp>&lt;tts&gt;</samp> template tags, you can instruct AwesomeTTS
  to omit it from the spoken playback by checking &ldquo;Ignore {{hint}}
  fields&rdquo;. Please note that this option does <em>not</em> affect the
  "hints" that are associated with cloze deletions, but rather specifically
  the use of the <code>{{hint}}</code> tag.</p>

<%disable={{ }}=mustache%>

<h3>Counting Adjacent Characters</h3>

<p>If you use some character in your notes to denote a blank to be filled in,
  and you want AwesomeTTS to tell you how many characters that blank was, you
  can activate this feature.</p>

<p>For example, if your note said <kbd>The grass is always _______ on the
  other ____</kbd>, and you entered an underscore into &ldquo;count adjacent
  characters&rdquo; with &ldquo;wrap in ellipses&rdquo; checked, AwesomeTTS
  will read <samp>The grass is always ... 7 ... on the other ... 4 ...</samp>
  as the phrase.</p>

<h2>Advanced Handling</h2>

<figure style="width: 484px">
    <img src="/config.text.advanced.png" width="484" height="168"
      alt="AwesomeTTS configuration dialog showing the advanced text panel">

    <figcaption>User-configured advanced substitution list</figcaption>
</figure>

<p>If you have specific strings of text from your input that you want to
  transform or remove, you can do so in the &ldquo;Advanced&rdquo; panel.</p>

<p>The &ldquo;regex&rdquo; checkbox will allow you to use regular expression
  patterns to perform advanced matching and replacement. For example, many
  users will find the use of <samp>\b</samp> (match a word boundary) helpful
  in formulating match patterns. Additionally, users may use substitution
  placeholders (e.g. <samp>\2</samp>) in the replacement text. More
  information about regular expressions can be found on <a rel="external"
  href="https://en.wikipedia.org/wiki/Regular_expression">Wikipedia</a>.</p>

<p>The &ldquo;unicode&rdquo; checkbox will enable some international
  functionality for the matcher, such as being able to use meta classes to
  match non-ASCII alphabetical characters.</p>

<p>If you want to remove the matched text rather than substitute it, you can
  leave the second text input blank.</p>

<p>AwesomeTTS will run these rules in the order that you specify after all the
  simple rules have already run, and will normalize whitespace and ellipses
  before each rule is run.</p>

<h2>Other Notes</h2>

<ul>
    <li>Usually&mdash;but not always&mdash;TTS services will interpret an
      ellipsis as a pause in speech, so wrapping cloze deletions and other
      similar elements can sometimes be used to offset such items from their
      surrounding context.  Your mileage will vary depending on sentence
      structure, service used, and options selected.</li>
    <li>AwesomeTTS will always remove <code>[sound]</code> tags and HTML from
      either kind of input source.</li>
    <li>Regular bracketed and braced text is treated separately from any cloze
      handling and the two options can be used together without conflicting,
      even though the cloze functionality uses these symbols.</li>
    <li>When handling text from the clipboard (e.g. for prepopulating the
      input text field when <a href="/usage/editor">adding audio files in the
      note editor</a>), some options from both sections will be applied.</li>
    <li>For text entered directly by the user, only minimal normalization will
      be done (e.g. removing excess whitespace, periods).</li>
    <li>Overlapping symbols in input text may produce unexpected results when
      using the options to strip text enclosed by parantheses, brackets,
      and/or braces. For example, <kbd>Hello world! (English {somewhat)
      informal}</kbd> would yield <samp>Hello world! informal}</samp> once the
      parentheses are removed.</li>
    <li>
        Users with multiple rules configured might be interested in how they
        interact with each other. The rules are listed on-screen roughly in
        the order that they are applied, but specifically, AwesomeTTS will
        transform input text using the following rules in the following order:

        <ol>
            <li>handling of any cloze functionality, <strong>as directed by
              the user</strong></li>
            <li>removal of any hint field activation links,
              <strong>always</strong> <em>(on-the-fly only)</em></li>
            <li>removal of any hint field content, <strong>if enabled by the
              user</strong> <em>(on-the-fly only)</em></li>
            <li>transformation of newlines into ellipses, <strong>if enabled
              by the user</strong></li>
            <li>removal of any HTML tags, <strong>always</strong></li>
            <li>removal of any <code>[sound]</code> tags,
              <strong>always</strong></li>
            <li>removal of any AwesomeTTS-derived paths (e.g. from using the
              bare path option from the <a href="/usage/browser">browser
              generator</a>), <strong>always</strong></li>
            <li>removal of any text within parentheses, <strong>if enabled by
              the user</strong></li>
            <li>removal of any text within brackets, <strong>if enabled by the
              user</strong></li>
            <li>removal of any text within curly braces, <strong>if enabled by
              the user</strong></li>
            <li>removal of any specifically-targeted characters, <strong>as
              directed by the user</strong></li>
            <li>counting of any specifically-targeted characters, <strong>as
              directed by the user</strong></li>
            <li>substitution of any specifically-targeted characters with
              ellipses, <strong>as directed by the user</strong></li>
            <li>list of custom advanced substitution (or removal) rules,
              <strong>as directed by and in the order given by the
              user</strong></li>
            <li>collapse of any excess ellipses (e.g. from preceding options),
              <strong>always</strong></li>
            <li>collapse of any contiguous whitespace to a single space,
              <strong>always</strong></li>
            <li>removal of leading or trailing whitespace,
              <strong>always</strong></li>
        </ol>
    </li>
</ul>

{{> below}}
